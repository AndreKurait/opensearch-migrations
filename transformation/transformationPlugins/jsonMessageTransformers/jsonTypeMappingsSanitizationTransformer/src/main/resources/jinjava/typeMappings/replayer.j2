{%- include "common/featureEnabled.j2" -%}

{%- macro handle_else(uri_parts) -%}
{
    "preserve": "*"
}
{%- endmacro -%}

{%- macro rewrite_uri_to_strip_types(uri_parts, index_mappings, request) -%}
{
  "method": "{{ request.method }}",
  "URI": "/{{ index_mappings[uri_parts[0]][uri_parts[1]] }}/_doc/{{ uri_parts[2] }}",
  "preserve": ["headers","payload"]
}
{%- endmacro -%}


{% macro rewrite_typemapping_to_target_index(uri_parts, index_mappings, request) -%}
{
  "method": "{{ request.method }}",
  "URI": "{{ index_mappings[uri_parts[0]][uri_parts[1]] }}",
  "payload": {
    "inlinedJsonBody": {
      "mappings": {
        "properties": {
          "type": {
            "type": "keyword"
          }
          {%- for type_name, type_props in request.body.mappings.items() -%}
            {%- for prop_name, prop_def in type_props.properties.items() -%}
              ,
              "{{- prop_name -}}": {{- prop_def | tojson -}}
            {%- endfor -%}
          {%- endfor -%}
        }
      }
    }
  }
}
{%- endmacro -%}


{%- set uri_parts = request.URI.split('/') | reject('equalto', '') | list -%}

{%- if uri_parts | length == 3 and uri_parts[0] in index_mappings and uri_parts[1] in index_mappings[uri_parts[0]] -%}
  {%- if is_enabled(features, 'rewrite_uri_to_strip_types') -%}
    {{ rewrite_uri_to_strip_types(uri_parts, index_mappings, request) -}}
  {%- endif -%}
{%- elif uri_parts | length == 2 and uri_parts[0] in index_mappings -%}
  {%- if is_enabled(features, 'rewrite_typemapping_to_target_index') -%}
    {{ rewrite_typemapping_to_target_index(uri_parts, index_mappings, request) -}}
  {%- endif -%}
{%- else -%}
  {%- if is_enabled(features, 'handle_else') -%}
    {{- handle_else(uri_parts) -}}
  {%- endif -%}
{%- endif -%}

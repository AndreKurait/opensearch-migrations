{%- include "common/featureEnabled.j2" -%}

{%- macro default_action(source_and_mappings) -%}
{
    "diagPair": {{ source_and_mappings }},
    "preserve": "*"
}
{%- endmacro -%}

{%- macro rewrite_uri_to_strip_types(match, input_map) -%}
{
  "method": "{{ input_map.request.method }}",
  "URI": "/{{ input_map.index_mappings[match.group1][match.group2] }}/_doc/{{ match.group3 }}",
  "preserve": ["headers","payload"]
}
{%- endmacro -%}

{% macro rewrite_create_index(match, input_map) -%}
{# In reality, this is going to need to figure out if there are multiple type mappings and deal with them according.y #}
{
  "method": "{{ input_map.request.method }}",
  "URI": "{{ input_map.index_mappings[match.group1] }}",
  "payload": {
    "inlinedJsonBody": {
      "mappings": {
        "properties": {
          "type": {
            "type": "keyword"
          }
          {%- for type_name, type_props in input_map.request.body.mappings.items() -%}
            {%- for prop_name, prop_def in type_props.properties.items() -%}
              ,
              "{{- prop_name -}}": {{- prop_def | tojson -}}
            {%- endfor -%}
          {%- endfor -%}
        }
      }
    }
  }
}
{%- endmacro -%}

{% set source_and_mappings = { 'request': request, 'index_mappings': index_mappings} %}
{%- import "common/route.j2" as rscope -%}
{{- rscope.route(source_and_mappings, request.method + " " + request.URI, flags, 'default_action',
    [
        ('(?:PUT|POST) /([^/]*)/([^/]*)/.*', 'rewrite_uri_to_strip_types', 'rewrite_add_request_to_strip_types'),
        (         'GET /([^/]*)/([^/]*)/.*', 'rewrite_uri_to_strip_types', 'rewrite_get_request_to_strip_types'),
        ('(?:PUT|POST) /([^/]*)',            'rewrite_create_index', 'rewrite_create_index')
  ])
-}}

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: bulk-loader-unified
  labels:
    {{- include "migration-assistant-chart.labels" . | nindent 4 }}
spec:
  serviceAccountName: argo-workflow-executor
  entrypoint: run-bulk-loaders
  arguments:
    parameters:
      - name: variant-runs
        default: '[{"name":"default", "target-host":"http://example:9200"}]'
  templates:
    - name: run-bulk-loaders
      inputs:
        parameters:
          - name: variant-runs
      steps:
        - - name: process-bulk-loads
            template: run-bulk-load
            withParam: "{{ "{{" }}inputs.parameters.variant-runs{{ "}}" }}"
            arguments:
              parameters:
                - name: bulk-load-config
                  value: "{{ "{{" }}item{{ "}}" }}"

    - name: run-bulk-load
      inputs:
        parameters:
          - name: bulk-load-config
      steps:
        - - name: validate-target-and-name-are-present-host
            template: validate-target-and-name-are-present
            arguments:
              parameters:
                - name: bulk-load-config
                  value: "{{ "{{" }}inputs.parameters.bulk-load-config{{ "}}" }}"

        - - name: extract-parameters
            template: extract-with-defaults
            arguments:
              parameters:
                - name: bulk-load-config
                  value: "{{ "{{" }}inputs.parameters.bulk-load-config{{ "}}" }}"

        - - name: create-replicaset
            template: create-rs
            arguments:
              parameters:
                - name: runtime-options
                  value: "{{ "{{" }}steps.extract-parameters.outputs.result{{ "}}" }}"
                - name: unique-name
                  value: "{{ "{{" }}inputs.parameters.bulk-load-config.name{{ "}}" }}"

        - - name: wait-for-completion
            template: check-completion
            arguments:
              parameters:
                - name: runtime-options
                  value: "{{ "{{" }}steps.extract-parameters.outputs.result{{ "}}" }}"
                - name: unique-name
                  value: "{{ "{{" }}inputs.parameters.bulk-load-config.name{{ "}}" }}"

        - - name: cleanup-replicaset
            template: delete-rs
            arguments:
              parameters:
                - name: unique-name
                  value: "{{ "{{" }}inputs.parameters.bulk-load-config.name{{ "}}" }}"

    # Validate that target-host is provided
    - name: validate-target-and-name-are-present
      inputs:
        parameters:
          - name: bulk-load-config
      script:
        image: alpine:3.14
        command: [sh]
        source: |
          set -e

          CONFIG='{{ "{{" }}inputs.parameters.bulk-load-config{{ "}}" }}'
          UNIQUE_NAME=$(echo $CONFIG | jq -r '.["name"] // empty')

          if [ -z "UNIQUE_NAME" ]; then
            echo "ERROR: 'name' is required but not specified for variant $(echo $CONFIG)"
            exit 1
          fi

          TARGET_HOST=$(echo $CONFIG | jq -r '.["target-host"] // empty')
          if [ -z "$TARGET_HOST" ]; then
            echo "ERROR: 'target-host' is required but not specified for variant $(echo $CONFIG | jq -r '.name')"
            exit 1
          fi

          echo "Target host and name validation passed: $TARGET_HOST"


    - name: extract-with-defaults
      inputs:
        parameters:
          - name: bulk-load-config
      script:
        image: alpine/jq:latest
        command: [sh]
        source: |
          set -e

          # Create a JSON object with built-in defaults
          cat > /tmp/defaults.json << EOF
          {
            "replicas": 1,
            "image": "migrations/reindex_from_snapshot:latest",
            "documents-per-bulk-request": "",
            "lease-duration": "",
            "lucene-dir": "/tmp",
            "snapshot-local-dir": "/snapshot",
            "snapshot-name": "",
            "target-insecure": "",
            "target-username": "",
            "target-password": "",
            "status-endpoint": "/status",
            "completion-pattern": "\"status\":\"complete\"",
            "poll-interval-seconds": 30,
            "timeout-minutes": 120
          }
          EOF

          # Extract config excluding name field
          CONFIG='{{ "{{" }}inputs.parameters.bulk-load-config{{ "}}" }}'
          echo $CONFIG | jq 'del(.name)' > /tmp/config-no-name.json

          # Merge with defaults (config values override defaults)
          jq -s '.[0] * .[1]' /tmp/defaults.json /tmp/config-no-name.json



    - name: create-rs
      inputs:
        parameters:
          - name: runtime-options
          - name: unique-name
      resource:
        action: create
        manifest: |
          {{ include "generateRfsDeployment" . | nindent 10 }}


    # Check completion template
    - name: check-completion
      inputs:
        parameters:
          - name: runtime-options
          - name: unique-name
      script:
        image: curlimages/curl:latest
        command: [bash]
        source: |
          set -e

          # Parse runtime options from JSON
          RUNTIME_OPTIONS='{{ "{{" }}inputs.parameters.runtime-options{{ "}}" }}'
          UNIQUE_NAME='{{ "{{" }}inputs.parameters.unique-name{{ "}}" }}'

          # Extract required parameters
          TARGET_HOST=$(echo $RUNTIME_OPTIONS | jq -r '.["target-host"]')
          STATUS_ENDPOINT=$(echo $RUNTIME_OPTIONS | jq -r '.["status-endpoint"]')
          COMPLETION_PATTERN=$(echo $RUNTIME_OPTIONS | jq -r '.["completion-pattern"]')
          POLL_INTERVAL=$(echo $RUNTIME_OPTIONS | jq -r '.["poll-interval-seconds"]')
          TIMEOUT_MINUTES=$(echo $RUNTIME_OPTIONS | jq -r '.["timeout-minutes"]')

          TIMEOUT_SECONDS=$((TIMEOUT_MINUTES * 60))
          ELAPSED_TIME=0

          echo "Starting completion check for bulk-loader-$UNIQUE_NAME"
          echo "Polling $TARGET_HOST$STATUS_ENDPOINT every $POLL_INTERVAL seconds"
          echo "Looking for pattern: $COMPLETION_PATTERN"

          while [ $ELAPSED_TIME -lt $TIMEOUT_SECONDS ]; do
            echo "Checking completion status (${ELAPSED_TIME}s elapsed)..."

            # Make the curl request
            RESPONSE=$(curl -s "${TARGET_HOST}${STATUS_ENDPOINT}")

            # Check if the response contains the completion pattern
            if echo "$RESPONSE" | grep -q "$COMPLETION_PATTERN"; then
              echo "Task completed successfully!"
              exit 0
            fi

            echo "Task still in progress, waiting $POLL_INTERVAL seconds before next check..."
            sleep $POLL_INTERVAL
            ELAPSED_TIME=$((ELAPSED_TIME + POLL_INTERVAL))
          done

          echo "Timeout reached after $TIMEOUT_MINUTES minutes. Task did not complete."
          exit 1

    # Delete ReplicaSet template
    - name: delete-rs
      inputs:
        parameters:
          - name: unique-name
      resource:
        action: delete
        flags: ["--ignore-not-found"]
        manifest: |
          apiVersion: apps/v1
          kind: ReplicaSet
          metadata:
            name: "bulk-loader-{{ "{{" }}inputs.parameters.unique-name{{ "}}" }}"
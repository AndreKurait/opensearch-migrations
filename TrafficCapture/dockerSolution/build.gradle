plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import org.opensearch.migrations.common.CommonUtils
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(project.fileTree("src/main/docker/${projectName}"))
}

dependencies {
    constraints {
        implementation('software.amazon.awssdk:secretsmanager:2.25.19') {
            because 'mend security issue'
        }
    }
}

def dockerFilesForExternalServices = [
        "elasticsearchWithSearchGuard": "elasticsearch_searchguard",
        "captureProxyBase": "capture_proxy_base",
        "elasticsearchTestConsole": "elasticsearch_client_test_console",
        "migrationConsole": "migration_console",
        "otelCollector": "otel_collector",
        "grafana": "grafana"
]

dockerFilesForExternalServices.each { projectName, dockerImageName ->
    def escapedProjectName = projectName;
    task("buildDockerImage_${escapedProjectName}", type: DockerBuildImage) {
        if (escapedProjectName == "migrationConsole") {
            // Define lists of libraries and applications
            def libraries = [
                project(":libraries:kafkaCommandLineFormatter")
            ]

            def applications = [
                project(":CreateSnapshot"),
                project(":MetadataMigration")
            ]

            // Create a single sync task to copy the required files
            def destDir = "build/docker/${dockerImageName}_${escapedProjectName}"
            def syncTask = project.tasks.create("syncArtifact_${dockerImageName}_${escapedProjectName}", Sync) {
                into destDir
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE

                // Copy libraries
                libraries.each { libProject ->
                    def applicationDestDir = "staging/${libProject.name}/"
                    from (libProject.configurations.findByName("runtimeClasspath").files) {
                        into "${applicationDestDir}/lib"
                    }
                    from (libProject.tasks.getByName('jar')) {
                        into "${applicationDestDir}/lib"
                    }
                }

                // Copy applications
                applications.each { appProject ->
                    def applicationDestDir = "staging/${appProject.name}/"
                    from (appProject.configurations.findByName("runtimeClasspath").files) {
                        into "${applicationDestDir}/lib"
                    }
                    from (appProject.tasks.getByName('jar')) {
                        into "${applicationDestDir}/lib"
                    }
                    from (appProject.tasks.getByName('startScripts').outputs.files) {
                        into "${applicationDestDir}/bin"
                    }
                }

                from "src/main/docker/${projectName}"
            }

            // Collect assemble tasks from libraries and applications
            def assembleTasks = (libraries + applications).collect { it.tasks.named("assemble") }
            // Ensure the sync task depends on the assemble tasks
            syncTask.dependsOn(assembleTasks)

            dependsOn syncTask
            dependsOn assembleTasks
            // Migration Console base image is the test console
            dependsOn "buildDockerImage_elasticsearchTestConsole"
        } else {
            // Sync the src into the build folder
            def syncTask = project.tasks.create("syncArtifact_${dockerImageName}_${escapedProjectName}", Sync) {
                from "src/main/docker/${projectName}"
                into "build/docker/${dockerImageName}_${escapedProjectName}"
                duplicatesStrategy = DuplicatesStrategy.FAIL
            }

            // Ensure the sync task depends on the build task
            dependsOn syncTask
        }
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("build/docker/${dockerImageName}_${projectName}")
    }
}

def javaContainerServices = [
        "capture_proxy": ":TrafficCapture:trafficCaptureProxyServer",
        "capture_proxy_es": ":TrafficCapture:trafficCaptureProxyServer",
        "traffic_replayer": ":TrafficCapture:trafficReplayer"
]
def baseImageProjectOverrides = [
        "capture_proxy": "captureProxyBase",
        "capture_proxy_es": "elasticsearchWithSearchGuard",
]
javaContainerServices.each { dockerImageName, projectName ->
    def artifactProject = project(projectName);
    CommonUtils.copyArtifactFromProjectToProjectsDockerStaging(project as Project, artifactProject, dockerImageName)
    CommonUtils.createDockerfile(project, artifactProject, baseImageProjectOverrides[dockerImageName], dockerFilesForExternalServices, dockerImageName)
}

javaContainerServices.forEach { dockerImageName, projectName ->
    def escapedProjectName = project(projectName).name;
    def dockerBuildDir = "build/docker/${dockerImageName}_${escapedProjectName}"
    task "buildDockerImage_${dockerImageName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${dockerImageName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    def extensionsDir = "src/main/docker/composeExtensions/"
    useComposeFiles =
            ['src/main/docker/docker-compose.yml',
             "${extensionsDir}/" + (project.hasProperty("otel-collector") ?
                     "${project.getProperty('otel-collector')}" :
                     "otel-prometheus-jaeger.yml"),
             "${extensionsDir}" + (project.hasProperty("multiProxy") ? "proxy-multi.yml" : "proxy-single.yml")
            ]
}

task buildDockerImages {
    dependsOn buildDockerImage_elasticsearchWithSearchGuard
    dependsOn buildDockerImage_migrationConsole
    dependsOn buildDockerImage_otelCollector
    dependsOn buildDockerImage_grafana
    dependsOn buildDockerImage_traffic_replayer
    dependsOn buildDockerImage_capture_proxy
    dependsOn buildDockerImage_capture_proxy_es
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))

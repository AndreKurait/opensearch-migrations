apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: full-migration
spec:
  serviceAccountName: argo-workflow-executor
  entrypoint: main
  parallelism: 100

  arguments:
    parameters:
      - name: etcd-endpoints
        value: "http://ma-etcd.ma.svc.cluster.local:2379"
      - name: etcd-user
        value: "root"
      - name: etcd-password
        value: "password"
      - name: etcd-image
        value: "migrations/migration_console:latest"
      - name: create-snapshot-template-name
        value: "create-snapshot"


  templates:
    # Main workflow template
    - name: main
      inputs:
        parameters:
          - name: source-migration-configs
            default: "[{\"source\":{\"id\":\"sourceA\",\"endpoint\":\"https://sourceA.example.com\",\"auth\":{\"type\":\"basic\",\"username\":\"user\",\"password\":\"pass\"}},\"snapshot-and-migration-configs\":[{\"indices\":[\"index_1\",\"index_2\"],\"existingSnapshot\":{},\"migrations\":[{\"metadata\":{\"mappings\":{\"properties\":{}},\"settings\":{}},\"documentBackfillConfigs\":[{\"indices\":[\"index_1\"]},{\"indices\":[\"index_2\"]}]}]}],\"replayer-config\":{\"batchSize\":1000,\"concurrency\":4}},{\"source\":{\"id\":\"sourceB\",\"endpoint\":\"https://sourceB.example.com\",\"auth\":{\"type\":\"basic\",\"username\":\"user\",\"password\":\"pass\"}},\"snapshot-and-migration-configs\":[{\"indices\":[\"index_3\",\"index_4\"],\"existingSnapshot\":{},\"migrations\":[{\"metadata\":{\"mappings\":{\"properties\":{}},\"settings\":{}},\"documentBackfillConfigs\":[{\"indices\":[\"index_3\",\"index_4\"]}]}]}],\"replayer-config\":{\"batchSize\":1000,\"concurrency\":4}}]"
          - name: targets
            value: "[{\"id\":\"T1\",\"endpoint\":\"https://t1.example.com\"}, {\"id\":\"T2\",\"endpoint\":\"https://t2.example.com\"}]"
      dag:
        tasks:
          # Initialize etcd keys used to determine once all the processors have finished for a target
          - name: init
            template: init-etcd-keys
            arguments:
              parameters:
                - name: configurations
                  value: "{{inputs.parameters.source-migration-configs}}"
                - name: targets
                  value: "{{inputs.parameters.targets}}"
                - name: prefix
                  value: "workflow-{{workflow.uid}}"

          - name: source-pipeline
            template: source-migration-pipeline
            dependencies: ["init"]
            withParam: "{{inputs.parameters.source-migration-configs}}"
            arguments:
              parameters:
                - name: source-migration-config
                  value: "{{item}}"
                - name: targets
                  value: "{{inputs.parameters.targets}}"
                - name: prefix
                  value: "{{tasks.init.outputs.parameters.prefix}}"

          # Clean up etcd keys after all processing is complete
          - name: cleanup
            template: cleanup-etcd-keys
            dependencies: ["source-pipeline"]
            arguments:
              parameters:
                - name: prefix
                  value: "{{tasks.init.outputs.parameters.prefix}}"

    - name: init-etcd-keys
      inputs:
        parameters:
          - name: configurations
          - name: targets
          - name: prefix
      outputs:
        parameters:
          - name: prefix
            valueFrom:
              path: /tmp/prefix
      container:
        image: migrations/migration_console:latest
        imagePullPolicy: Never
        command: [sh, -c]
        args:
          - |
            SOURCE_CONFIG=$(echo '{{inputs.parameters.configurations}}')
            ls -l /usr/local/bin/
            echo "source config = $SOURCE_CONFIG"

            SOURCES=$(echo "$SOURCE_CONFIG" | jq -r 'to_entries | map("source-" + (.key|tostring) + "-" + .value.source.endpoint) | join(",")')
            echo "Sources= $SOURCES"
            
            # Extract paths to migrations elements
            PROCESSORS=$(echo "$SOURCE_CONFIG" | jq -r 'to_entries | map(.key as $src_idx | .value["snapshot-and-migration-configs"] | to_entries | map("[" + ($src_idx|tostring) + "].snapshot-and-migration-configs[" + (.key|tostring) + "].migrations")) | flatten | join(",")')
            echo "Processors= $PROCESSORS"
            
            echo "{{inputs.parameters.prefix}}" > /tmp/prefix
            export ETCDCTL_API=3
            
            # Run etcdctl with configured endpoints and authentication
            etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
            
            # Store the workflow prefix in etcd for future reference
            $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/info/prefix "{{inputs.parameters.prefix}}"
            $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/info/started "$(date +%s)"
            
            # Initialize target counters and metadata
            for TARGET in $(echo {{inputs.parameters.targets}} | tr ',' ' '); do
              # Create base keys with initial values
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$TARGET/completed_count "0"
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$TARGET/processed_count "0"
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$TARGET/status "pending"
            
              # Calculate total expected
              SOURCE_COUNT=$(echo $SOURCES | tr ',' ' ' | wc -w)
              PROCESSOR_COUNT=$(echo $PROCESSORS | tr ',' ' ' | wc -w)
              TOTAL_EXPECTED=$((SOURCE_COUNT * PROCESSOR_COUNT))
            
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$TARGET/total_expected "$TOTAL_EXPECTED"
              echo "Target $TARGET expects $TOTAL_EXPECTED combinations"
            done
            
            # Initialize pending status for all combinations
            for SOURCE in $(echo $SOURCES | tr ',' ' '); do
              for PROCESSOR in $(echo $PROCESSORS | tr ',' ' '); do
                for TARGET in $(echo {{inputs.parameters.targets}} | tr ',' ' '); do
                  # Mark as pending
                  $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$TARGET/combos/$SOURCE-$PROCESSOR "pending"
                done
              done
            done
            
            echo "Etcd keys initialized with prefix: {{inputs.parameters.prefix}}"




    # Unroll snapshotting and their dependent steps
    - name: source-migration-pipeline
      inputs:
        parameters:
          - name: source-migration-config
          - name: targets
          - name: prefix
      steps:
        - - name: snapshot-pipeline
            template: snapshot-pipeline
            withParam: "{{=fromJSON(inputs.parameters['source-migration-config'])['snapshot-and-migration-configs']}}"
            arguments:
              parameters:
                - name: source-config
                  value: "{{=fromJSON(inputs.parameters['source-migration-config'])['source']}}"
                - name: snapshot-and-migration-config
                  value: "{{item}}"
                - name: targets
                  value: "{{inputs.parameters.targets}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

    - name: snapshot-pipeline
      inputs:
        parameters:
          - name: source-config
          - name: snapshot-and-migration-config
          - name: targets
          - name: prefix
      steps:
        - - name: create-or-get-snapshot
            template: create-or-get-snapshot
            arguments:
              parameters:
                - name: source-config
                  value: "{{inputs.parameters.source-config}}"
                - name: snapshot-and-migration-config
                  value: "{{inputs.parameters.snapshot-and-migration-config}}"
        - - name: snapshot-to-target-pipeline
            template: snapshot-to-target-pipeline
            withParam: "{{inputs.parameters.targets}}"
            arguments:
              parameters:
                - name: source-config
                  value: "{{inputs.parameters.source-config}}"
                - name: snapshot-config
                  value: "{{steps.create-or-get-snapshot.outputs.parameters.snapshot-config}}"
                - name: migration-configs
                  value: "{{=fromJSON(inputs.parameters['snapshot-and-migration-config'])['migrations']}}"
                - name: target
                  value: "{{item}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

    - name: create-or-get-snapshot
      inputs:
        parameters:
          - name: source-config
          - name: snapshot-and-migration-config
      outputs:
        parameters:
          - name: snapshot-config
            valueFrom:
              expression: "toJSON(fromJSON(inputs.parameters['snapshot-and-migration-config'])['existingSnapshot'])"
      steps: [[]]

    - name: snapshot-to-target-pipeline
      inputs:
        parameters:
          - name: source-config
          - name: snapshot-config
          - name: migration-configs
          - name: target
          - name: prefix
      steps:
        - - name: migrate-from-snapshot-pipeline
            template: migrate-from-snapshot-pipeline
            withParam: "{{inputs.parameters.migration-configs}}"
            arguments:
              parameters:
                - name: source-config
                  value: "{{inputs.parameters.source-config}}"
                - name: snapshot-config
                  value: "{{inputs.parameters.snapshot-config}}"
                - name: migration-config
                  value: "{{item}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

    - name: migrate-from-snapshot-pipeline
      inputs:
        parameters:
          - name: source-config
          - name: snapshot-config
          - name: migration-config
          - name: target
          - name: prefix
      steps:
        - - name: migrate-metadata
            template: migrate-metadata
#            when: "{{=fromJSON(inputs.parameters['migration-config'])['metadata'] != nil}}"
            arguments:
              parameters:
                - name: source-config
                  value: "{{inputs.parameters.source-config}}"
                - name: snapshot-config
                  value: "{{inputs.parameters.snapshot-config}}"
                - name: migration-config
                  value: "{{fromJSON(inputs.parameters['migration-config'])['metadata']}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
        - - name: bulk-load-documents
            template: bulk-load-documents
            withParam: "{{=fromJSON(inputs.parameters['migration-config'])['documentBackfillConfigs']}}"
            arguments:
              parameters:
                - name: snapshot-config
                  value: "{{inputs.parameters.snapshot-config}}"
                - name: rfs-config
                  value: "{{item}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
        # Check target readiness after processing and bump it to the next phase if ready
        - - name: check-for-target-processing-completion
            template: reduce-target-when-ready
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source-config}}"
                - name: processor
                  value: "dont know yet"
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

    - name: migrate-metadata
      inputs:
        parameters:
          - name: source-config
          - name: snapshot-config
          - name: migration-config
          - name: target
      container:
        image: migrations/migration_console:latest
        imagePullPolicy: IfNotPresent
        command: [ echo ]
        args: [ "metadata migrate" ]

    - name: bulk-load-documents
      inputs:
        parameters:
          - name: snapshot-config
          - name: rfs-config
          - name: target
      container:
        image: migrations/migration_console:latest
        imagePullPolicy: IfNotPresent
        command: [ echo ]
        args: [ "backfill" ]

    # Do target processing after waiting for all other work (processors) to the target to complete
    - name: reduce-target-when-ready
      inputs:
        parameters:
          - name: source
          - name: processor
          - name: target
          - name: prefix
      steps:
        - - name: target-processed-latch
            template: target-processed-latch
            arguments:
              parameters:
                - name: source
                  value: "{{inputs.parameters.source}}"
                - name: processor
                  value: "{{inputs.parameters.processor}}"
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

        - - name: targets-all-processed-fan-in
            template: reduce-processors-for-target
            when: "{{steps.target-processed-latch.outputs.parameters.should-finalize}} == true"
            arguments:
              parameters:
                - name: target
                  value: "{{inputs.parameters.target}}"
                - name: prefix
                  value: "{{inputs.parameters.prefix}}"

    # Check target processors progress and determine if all the work in this stage
    # for a target has been completed
    - name: target-processed-latch
      inputs:
        parameters:
          - name: source
          - name: processor
          - name: target
          - name: prefix
      outputs:
        parameters:
          - name: should-finalize
            valueFrom:
              path: /tmp/should-finalize
      script:
        image: "{{workflow.parameters.etcd-image}}"
        imagePullPolicy: Never
        command: [sh]
        source: |
          SOURCE="{{inputs.parameters.source}}"
          PROCESSOR="{{inputs.parameters.processor}}"
          TARGET="{{inputs.parameters.target}}"
          PREFIX="{{inputs.parameters.prefix}}"
          
          export ETCDCTL_API=3
          
          # Run etcdctl with configured endpoints
          etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
          
          # Update combo status atomically
          $etcdctl_cmd put /$PREFIX/workflow/targets/$TARGET/combos/$SOURCE-$PROCESSOR "completed"
          
          # Atomically increment completion counter
          CURRENT=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/completed_count --print-value-only)
          $etcdctl_cmd put /$PREFIX/workflow/targets/$TARGET/completed_count "$((CURRENT + 1))"
          
          # Atomically increment processed counter (regardless of success or failure)
          PROCESSED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/processed_count --print-value-only)
          $etcdctl_cmd put /$PREFIX/workflow/targets/$TARGET/processed_count "$((PROCESSED + 1))"
          
          
          # Read current counters atomically
          PROCESSED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/processed_count --print-value-only)
          TOTAL=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/total_expected --print-value-only)
          STATUS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/status --print-value-only)
          
          echo "Target $TARGET status: $PROCESSED processed out of $TOTAL expected" >&2
          
          # Default: don't finalize yet
          SHOULD_FINALIZE="false"
          
          # Check if all processes have completed for this target
          if [ $PROCESSED -ge $TOTAL ]; then
            echo "All $PROCESSED processors for $TARGET have completed processing" >&2
          
            # Check if the target was already processed
            if [ "$STATUS" = "pending" ]; then
              # Atomically update status with compare-and-swap to avoid race conditions
              $etcdctl_cmd put /$PREFIX/workflow/targets/$TARGET/status "ready" --prev-kv
              if [ $? -eq 0 ]; then
                echo "Updated status, $TARGET is now ready for finalization" >&2
                SHOULD_FINALIZE="true"
              else
                echo "Status was already changed by another process" >&2
              fi
            else
              echo "Target $TARGET was already marked as $STATUS" >&2
            fi
          else
            echo "Target $TARGET still has pending processors ($PROCESSED < $TOTAL)" >&2
          fi
          
          # Output just the boolean value to stdout for the result
          echo $SHOULD_FINALIZE > /tmp/should-finalize
          echo $SHOULD_FINALIZE

    # This is where we'd start running live-replay
    - name: reduce-processors-for-target
      inputs:
        parameters:
          - name: target
          - name: prefix
      container:
        image: "{{workflow.parameters.etcd-image}}"
        imagePullPolicy: Never
        command: [sh, -c] # dummy implementation that preserves some stats about the work that was done
        args:
          - |
            export ETCDCTL_API=3
            etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
            
            TARGET="{{inputs.parameters.target}}"
            PREFIX="{{inputs.parameters.prefix}}"
            echo "===== FINALIZING TARGET $TARGET ====="
            
            # Get completed and processed counts
            COMPLETED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/completed_count --print-value-only)
            PROCESSED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/processed_count --print-value-only)
            TOTAL=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/total_expected --print-value-only)
            
            echo "Completion stats:"
            echo "- Completed: $COMPLETED"
            echo "- Processed: $PROCESSED" 
            echo "- Total: $TOTAL"
            
            # Show successful combinations
            echo "Successful processor combinations:"
            $etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/combos/ --prefix | grep -B1 completed
            
            # Perform target-specific final processing
            echo "Performing final processing for $TARGET..."
            sleep 10  # Simulate final processing
            
            # Mark as finalized
            $etcdctl_cmd put /$PREFIX/workflow/targets/$TARGET/status "finalized"
            
            echo "Target $TARGET processing complete."

    - name: cleanup-etcd-keys
      inputs:
        parameters:
          - name: prefix
      container:
        image: "{{workflow.parameters.etcd-image}}"
        imagePullPolicy: Never
        command: [sh, -c]
        args:
          - |
            export ETCDCTL_API=3
            etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
            
            PREFIX="{{inputs.parameters.prefix}}"
            echo "===== CLEANING UP ETCD KEYS FOR PREFIX $PREFIX ====="
            
            # Record workflow completion time
            $etcdctl_cmd put /$PREFIX/workflow/info/completed "$(date +%s)"
            STARTED=$($etcdctl_cmd get /$PREFIX/workflow/info/started --print-value-only)
            COMPLETED=$(date +%s)
            DURATION=$((COMPLETED - STARTED))
            
            echo "Workflow completed in $DURATION seconds"
            
            # Get workflow stats for logging purposes
            echo "Workflow completion stats:"
            
            for TARGET in $($etcdctl_cmd get /$PREFIX/workflow/targets/ --prefix --keys-only | grep "/status" | awk -F/ '{print $(NF-1)}' | sort | uniq); do
              STATUS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/status --print-value-only)
              COMPLETED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/completed_count --print-value-only)
              TOTAL=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/total_expected --print-value-only)
            
              echo "- Target $TARGET: Status=$STATUS, Completed=$COMPLETED/$TOTAL"
            done
            
            # Keep statistics in a separate key that will persist
            STATS_KEY="workflow-stats/runs/$PREFIX"
            
            # Save summarized workflow stats to a persistent key
            $etcdctl_cmd put /$STATS_KEY/started "$STARTED"
            $etcdctl_cmd put /$STATS_KEY/completed "$COMPLETED"
            $etcdctl_cmd put /$STATS_KEY/duration "$DURATION"
            
            for TARGET in $($etcdctl_cmd get /$PREFIX/workflow/targets/ --prefix --keys-only | grep "/status" | awk -F/ '{print $(NF-1)}' | sort | uniq); do
              STATUS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/status --print-value-only)
              COMPLETED=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/completed_count --print-value-only)
              TOTAL=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET/total_expected --print-value-only)
            
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET/status "$STATUS"
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET/completed "$COMPLETED"
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET/total "$TOTAL"
            done
            
            # Delete all workflow keys for this run (but keep the stats)
            echo "Deleting all workflow keys with prefix: /$PREFIX/workflow/"
            $etcdctl_cmd del /$PREFIX/workflow/ --prefix
            
            echo "Cleanup complete. Workflow stats preserved under /$STATS_KEY/"
plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.16.12"
    id "com.bmuschko.docker-java-application" version "9.3.1"
}

import java.security.MessageDigest
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.taskdefs.condition.Os

def calculateDockerHash(String projectName) {
    MessageDigest digest = MessageDigest.getInstance('SHA-256')
    fileTree("src/main/docker/${projectName}")
            .each( file ->
                    file.withInputStream { is ->
                        var buffer = new byte[1024]
                        int read
                        while ((read = is.read(buffer)) != -1) {
                            digest.update(buffer, 0, read)
                        }
                    }
            )
    return digest.digest().encodeHex().toString()
}

dependencies {
    implementation project(':trafficCaptureProxyServer')
    testImplementation project(':trafficCaptureProxyServerTest')
}

def dockerFilesForExternalServices = [
        "nginx": "nginx"
]

// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    task("buildDockerImage_${projectName}", type: DockerBuildImage) {
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def javaContainerServices = [
        "trafficCaptureProxyServer": "capture_proxy",
        "trafficCaptureProxyServerTest": "jmeter"
]
def baseImageProjectOverrides = [
        "nginx": "nginx"
]

javaContainerServices.each { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    def artifactsDir = "${dockerBuildDir}/jars";
    task("copyArtifact_${projectName}", type: Copy) {
        dependsOn ":${projectName}:build"
        dependsOn ":${projectName}:jar"
        from { project(":${projectName}").configurations.findByName("runtimeClasspath").files }
        from { project(":${projectName}").tasks.getByName('jar') }
        into artifactsDir
        include "*.jar"
        duplicatesStrategy = DuplicatesStrategy.WARN
    }

    task "createDockerfile_${projectName}"(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
        dependsOn "copyArtifact_${projectName}"
        destFile = project.file("${dockerBuildDir}/Dockerfile")
        def baseImageOverrideProjectName = baseImageProjectOverrides.get(projectName)
        if (baseImageOverrideProjectName) {
            def dependentDockerImageName = dockerFilesForExternalServices.get(baseImageOverrideProjectName)
            def hashNonce = calculateDockerHash(baseImageOverrideProjectName)
            from "migrations/${dependentDockerImageName}:${hashNonce}"
            dependsOn "buildDockerImage_${baseImageOverrideProjectName}"
            runCommand("sed -i -e \"s|mirrorlist=|#mirrorlist=|g\" /etc/yum.repos.d/CentOS-* ;  sed -i -e \"s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g\" /etc/yum.repos.d/CentOS-*")
            runCommand("yum -y install nmap-ncat")
        } else {
            from 'openjdk:11-jre'
            runCommand("apt-get update && apt-get install -y netcat")
        }

        copyFile("jars", "/jars")
        // can't set the environment variable from the runtimeClasspath because the Dockerfile is
        // constructed in the configuration phase and the classpath won't be realized until the
        // execution phase.  Therefore, we need to have docker run the command to resolve the classpath
        // and it's simplest to pack that up into a helper script.
        runCommand("printf \"#!/bin/sh\\njava -cp `echo /jars/*.jar | tr \\   :` \\\"\\\$@\\\" \" > /runJavaWithClasspath.sh");
        runCommand("chmod +x /runJavaWithClasspath.sh")
        // container stay-alive
        defaultCommand('tail', '-f', '/dev/null')
        //defaultCommand('/runJavaWithClasspath.sh', '...')
    }
}

(javaContainerServices).forEach { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    task "buildDockerImage_${projectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${projectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    useComposeFiles.add("src/main/docker/docker-compose.yml")
}

task buildDockerImages {
    dependsOn buildDockerImage_nginx
    dependsOn buildDockerImage_trafficCaptureProxyServer
    dependsOn buildDockerImage_trafficCaptureProxyServerTest
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
